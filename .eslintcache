[{"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx":"1","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts":"2","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx":"3","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx":"4","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts":"5","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx":"6","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx":"7","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx":"8","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx":"9","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts":"10","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx":"11","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx":"12","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx":"13","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx":"14","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx":"15","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx":"16"},{"size":955,"mtime":1606752924263,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1606394056262,"results":"19","hashOfConfig":"18"},{"size":497,"mtime":1606753052834,"results":"20","hashOfConfig":"18"},{"size":5319,"mtime":1607175419075,"results":"21","hashOfConfig":"18"},{"size":1817,"mtime":1606981996950,"results":"22","hashOfConfig":"18"},{"size":1030,"mtime":1606989116982,"results":"23","hashOfConfig":"18"},{"size":814,"mtime":1606988690423,"results":"24","hashOfConfig":"18"},{"size":3362,"mtime":1607099127675,"results":"25","hashOfConfig":"18"},{"size":657,"mtime":1606739969629,"results":"26","hashOfConfig":"18"},{"size":598,"mtime":1606755555058,"results":"27","hashOfConfig":"18"},{"size":2198,"mtime":1606982541400,"results":"28","hashOfConfig":"18"},{"size":2941,"mtime":1606990132181,"results":"29","hashOfConfig":"18"},{"size":8528,"mtime":1606988455811,"results":"30","hashOfConfig":"18"},{"size":398,"mtime":1607099012551,"results":"31","hashOfConfig":"18"},{"size":5310,"mtime":1606989964327,"results":"32","hashOfConfig":"18"},{"size":236,"mtime":1606990551717,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1josc0v",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx",[],["73","74"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts",[],["75","76"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx",[],["77","78"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx",[],["79","80"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx",["81"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts",[],["82","83"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx",["84","85"],"import React, { useMemo, useState } from 'react';\r\nimport { Modal, Upload } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nimport { getToken } from 'utils';\r\n\r\nimport { RcCustomRequestOptions } from 'antd/lib/upload/interface';\r\nimport { IUpload } from 'types';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onOk: (uploads: IUpload[]) => void;\r\n};\r\n\r\nconst UploadFile: React.FC<Props> = ({ isVisible, onClose, onOk }) => {\r\n  const [uploads, setUploads] = useState<IUpload[]>([]);\r\n\r\n  const photos = useMemo(() => {\r\n    return uploads.map((photo) => ({\r\n      uid: photo._id,\r\n      name: photo.filename,\r\n      size: 50,\r\n      type: photo.mimetype as string,\r\n      url: photo.path,\r\n    }));\r\n  }, [uploads]);\r\n\r\n  const uploadFile = async (fileInfo: RcCustomRequestOptions) => {\r\n    console.log('args', fileInfo);\r\n    const token = getToken();\r\n\r\n    const file = fileInfo.file;\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n\r\n    try {\r\n      const response = (\r\n        await axios({\r\n          method: 'post',\r\n          url: process.env.REACT_APP_FILE_URL,\r\n          data,\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n      ).data[0];\r\n\r\n      setUploads((v) => [...v, response]);\r\n      console.log('resp', response);\r\n    } catch (e) {\r\n      console.error('error in uploading', e);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setUploads([]);\r\n    onClose();\r\n  };\r\n\r\n  const onSendPhoto = () => {\r\n    setUploads([]);\r\n    onOk(uploads);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={isVisible}\r\n      onCancel={onCloseModal}\r\n      onOk={() => onSendPhoto()}\r\n      okText=\"Отправить\"\r\n      cancelText=\"Отменить\"\r\n      centered\r\n      destroyOnClose\r\n    >\r\n      <Upload\r\n        customRequest={uploadFile}\r\n        listType=\"picture-card\"\r\n        fileList={photos}\r\n      >\r\n        {uploads.length >= 4 ? null : (\r\n          <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Загрузить</div>\r\n          </div>\r\n        )}\r\n      </Upload>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx",["86","87"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx",["88"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx",["89"],"import { Paginated } from '@feathersjs/feathers';\r\nimport { Input } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport { IChat } from 'types';\r\nimport { getReceiver, getUser } from 'utils';\r\nimport apiClient from 'utils/apiClient';\r\n\r\ntype Props = {\r\n  chats: IChat[];\r\n  activeChat: Partial<IChat>;\r\n  setChats: React.Dispatch<React.SetStateAction<IChat[]>>;\r\n  onChatClick: (chat: IChat) => void;\r\n};\r\n\r\nconst Side: React.FC<Props> = ({\r\n  chats,\r\n  activeChat,\r\n  setChats,\r\n  onChatClick,\r\n}) => {\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n  const [search, setSearch] = useState<string>('');\r\n\r\n  const filteredChats = useMemo(() => {\r\n    if (!search) return chats;\r\n    return chats.filter(\r\n      (chat) =>\r\n        chat[getReceiver()]?.firstName\r\n          ?.toLowerCase()\r\n          .includes(search.toLowerCase()) ||\r\n        chat[getReceiver()]?.lastName\r\n          ?.toLowerCase()\r\n          .includes(search.toLowerCase())\r\n    );\r\n  }, [search, chats]);\r\n\r\n  const sortedChats = useMemo(() => {\r\n    return filteredChats.sort(\r\n      (a, b) =>\r\n        new Date(b.lastMessageDate).getTime() -\r\n        new Date(a.lastMessageDate).getTime()\r\n    );\r\n  }, [filteredChats]);\r\n\r\n  const getUnreadMessages = (chat: IChat) =>\r\n    chat[\r\n      (getUser().role + 'UnreadMessages') as\r\n        | 'clientUnreadMessages'\r\n        | 'operatorUnreadMessages'\r\n    ];\r\n\r\n  const fetchNewChats = async () => {\r\n    const user = getUser();\r\n    const field = user.role === 'client' ? 'clientId' : 'operatorId';\r\n\r\n    const response: Paginated<IChat> = await apiClient.service('chats').find({\r\n      query: {\r\n        [field]: user._id,\r\n        $limit: 15,\r\n        $skip: chats.length,\r\n        $search: search || undefined,\r\n      },\r\n    });\r\n\r\n    const newItems = chats.concat(response.data);\r\n    setChats(newItems);\r\n\r\n    if (newItems.length >= response.total) {\r\n      setHasMore(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchChats = async () => {\r\n      const user = getUser();\r\n      const field = user.role === 'client' ? 'clientId' : 'operatorId';\r\n\r\n      const response: Paginated<IChat> = await apiClient.service('chats').find({\r\n        query: {\r\n          [field]: user._id,\r\n          $limit: 15,\r\n          $skip: 0,\r\n        },\r\n      });\r\n\r\n      console.log('chats', response);\r\n      setChats(response.data);\r\n    };\r\n\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat__side\">\r\n      <div className=\"chat__side-search\">\r\n        <Avatar src={getUser().avatar?.path} />\r\n        <Input\r\n          placeholder=\"Поиск\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n      <h2 className=\"chat__title\">Чаты</h2>\r\n      <div className=\"chat__side-items\" id=\"scrollableContainer\">\r\n        <InfiniteScroll\r\n          dataLength={chats.length}\r\n          next={fetchNewChats}\r\n          hasMore={hasMore}\r\n          loader={\r\n            chats.length === 0 ? (\r\n              <span />\r\n            ) : (\r\n              <ReactLoading\r\n                type=\"bars\"\r\n                color=\"#69C262\"\r\n                width=\"40px\"\r\n                className=\"loading-center\"\r\n              />\r\n            )\r\n          }\r\n          scrollableTarget=\"scrollableContainer\"\r\n        >\r\n          {sortedChats.map((chat) => {\r\n            return (\r\n              <div\r\n                key={chat._id}\r\n                className={clsx('chat__box', {\r\n                  'chat__box--active': chat._id === activeChat._id,\r\n                })}\r\n                onClick={() => onChatClick(chat)}\r\n              >\r\n                <div className=\"chat__box__left\">\r\n                  <Avatar src={chat[getReceiver()]?.avatar?.path} />\r\n                </div>\r\n                <div className=\"chat__box__center\">\r\n                  <div className=\"chat__box__name\">\r\n                    {chat[getReceiver()]?.firstName}{' '}\r\n                    {chat[getReceiver()]?.lastName}\r\n                  </div>\r\n                  <div className=\"chat__box__last-message\">\r\n                    {chat.lastMessage?.userId === getUser()._id && (\r\n                      <span>Вы:</span>\r\n                    )}\r\n                    {chat.lastMessage?.type === 'text' &&\r\n                      chat.lastMessage?.text}\r\n                    {chat.lastMessage?.type === 'photo' && '📥 Photo'}\r\n                  </div>\r\n                </div>\r\n                <div className=\"chat__box__right\">\r\n                  <div className=\"chat__box__time\">\r\n                    {moment(chat.lastMessage?.createdAt).format('HH:mm')}\r\n                  </div>\r\n                  {!!getUnreadMessages(chat) && (\r\n                    <div className=\"chat__box__messages-count\">\r\n                      {getUnreadMessages(chat)}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </InfiniteScroll>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Side;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"90","replacedBy":"96"},{"ruleId":"92","replacedBy":"97"},{"ruleId":"90","replacedBy":"98"},{"ruleId":"92","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":36,"column":6,"nodeType":"102","endLine":36,"endColumn":8,"suggestions":"103"},{"ruleId":"90","replacedBy":"104"},{"ruleId":"92","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":31,"column":5,"nodeType":"108","messageId":"109","endLine":31,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":49,"column":7,"nodeType":"108","messageId":"109","endLine":49,"endColumn":18},{"ruleId":"110","severity":1,"message":"111","line":13,"column":10,"nodeType":"112","messageId":"113","endLine":13,"endColumn":14},{"ruleId":"114","severity":1,"message":"111","line":13,"column":10,"nodeType":"112","messageId":"113","endLine":13,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":152,"column":9,"nodeType":"108","messageId":"109","endLine":152,"endColumn":20},{"ruleId":"106","severity":1,"message":"107","line":92,"column":7,"nodeType":"108","messageId":"109","endLine":92,"endColumn":18},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],["115"],["116"],["115"],["116"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["117"],["115"],["116"],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [history]",{"range":"120","text":"121"},[1007,1009],"[history]"]
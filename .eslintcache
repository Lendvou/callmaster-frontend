[{"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx":"1","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts":"2","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx":"3","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx":"4","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts":"5","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx":"6","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx":"7","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx":"8","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx":"9","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts":"10","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx":"11","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx":"12","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx":"13","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx":"14","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx":"15","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx":"16","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx":"17","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\404.tsx":"18","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Message.tsx":"19","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\DataContext.tsx":"20"},{"size":1061,"mtime":1607876774600,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1606394056262,"results":"23","hashOfConfig":"22"},{"size":497,"mtime":1606753052834,"results":"24","hashOfConfig":"22"},{"size":5319,"mtime":1607175419075,"results":"25","hashOfConfig":"22"},{"size":1817,"mtime":1606981996950,"results":"26","hashOfConfig":"22"},{"size":1030,"mtime":1606989116982,"results":"27","hashOfConfig":"22"},{"size":814,"mtime":1606988690423,"results":"28","hashOfConfig":"22"},{"size":3472,"mtime":1607877294122,"results":"29","hashOfConfig":"22"},{"size":657,"mtime":1606739969629,"results":"30","hashOfConfig":"22"},{"size":598,"mtime":1606755555058,"results":"31","hashOfConfig":"22"},{"size":2864,"mtime":1607432575905,"results":"32","hashOfConfig":"22"},{"size":4485,"mtime":1607877102852,"results":"33","hashOfConfig":"22"},{"size":7581,"mtime":1607877576094,"results":"34","hashOfConfig":"22"},{"size":398,"mtime":1607874808378,"results":"35","hashOfConfig":"22"},{"size":5425,"mtime":1607877222823,"results":"36","hashOfConfig":"22"},{"size":236,"mtime":1606990551717,"results":"37","hashOfConfig":"22"},{"size":6643,"mtime":1607502550385,"results":"38","hashOfConfig":"22"},{"size":227,"mtime":1606988631945,"results":"39","hashOfConfig":"22"},{"size":1525,"mtime":1607412462247,"results":"40","hashOfConfig":"22"},{"size":926,"mtime":1607877086695,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1josc0v",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts",[],["89","90"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx",[],["91","92"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx",[],["93","94"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx",["95"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts",[],["96","97"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx",["98","99","100","101"],"import React, { useMemo, useState } from 'react';\r\nimport { Modal, Upload } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nimport { getToken } from 'utils';\r\n\r\nimport { RcCustomRequestOptions } from 'antd/lib/upload/interface';\r\nimport { IUpload } from 'types';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onOk: (uploads: IUpload[]) => void;\r\n};\r\n\r\nconst UploadFile: React.FC<Props> = ({ isVisible, onClose, onOk }) => {\r\n  const [uploads, setUploads] = useState<IUpload[]>([]);\r\n\r\n  const photos = useMemo(() => {\r\n    return uploads.map((photo) => ({\r\n      uid: photo._id,\r\n      name: photo.filename,\r\n      size: 50,\r\n      type: photo.mimetype as string,\r\n      url: photo.path,\r\n    }));\r\n  }, [uploads]);\r\n\r\n  const uploadFile = async (fileInfo: RcCustomRequestOptions) => {\r\n    console.log('args', fileInfo);\r\n    const token = getToken();\r\n\r\n    const file = fileInfo.file;\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n\r\n    var reader = new FileReader();\r\n\r\n    //Read the contents of Image File.\r\n    reader.readAsDataURL(file);\r\n\r\n    reader.onload = function (e) {\r\n      //Initiate the JavaScript Image object.\r\n      var image = new Image();\r\n\r\n      //Set the Base64 string return from FileReader as source.\r\n      image.src = e.target!.result as string;\r\n\r\n      //Validate the File Height and Width.\r\n      image.onload = function () {\r\n        // @ts-ignore\r\n        var height = this.height;\r\n        // @ts-ignore\r\n        var width = this.width;\r\n        console.log('height withd', width, height);\r\n      };\r\n    };\r\n\r\n    try {\r\n      const response = (\r\n        await axios({\r\n          method: 'post',\r\n          url: process.env.REACT_APP_FILE_URL,\r\n          data,\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n      ).data[0];\r\n\r\n      setUploads((v) => [...v, response]);\r\n      console.log('resp', response);\r\n    } catch (e) {\r\n      console.error('error in uploading', e);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setUploads([]);\r\n    onClose();\r\n  };\r\n\r\n  const onSendPhoto = () => {\r\n    setUploads([]);\r\n    onOk(uploads);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={isVisible}\r\n      onCancel={onCloseModal}\r\n      onOk={() => onSendPhoto()}\r\n      okText=\"Отправить\"\r\n      cancelText=\"Отменить\"\r\n      centered\r\n      destroyOnClose\r\n    >\r\n      <Upload\r\n        customRequest={uploadFile}\r\n        listType=\"picture-card\"\r\n        fileList={photos}\r\n        onChange={(arg) => console.log('file', arg)}\r\n      >\r\n        {uploads.length >= 4 ? null : (\r\n          <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Загрузить</div>\r\n          </div>\r\n        )}\r\n      </Upload>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx",["102","103","104","105","106","107"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx",["108"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx",[],["109","110"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx",["111","112","113","114","115","116","117","118","119"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport querystring from 'query-string';\r\nimport Peer from 'peerjs';\r\nimport { Modal } from 'antd';\r\nimport { useLocation } from 'react-router';\r\n\r\nimport Side from './Side';\r\nimport Body from './Body';\r\n\r\nimport apiClient from 'utils/apiClient';\r\nimport {\r\n  getRandomInteger,\r\n  getUnreadMessages,\r\n  getUnreadMessagesKey,\r\n  getUser,\r\n} from 'utils';\r\n\r\nimport { Paginated } from '@feathersjs/feathers';\r\nimport { IChat, IUser } from 'types';\r\n\r\nconst Chat = () => {\r\n  const { search } = useLocation();\r\n\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [activeChat, setActiveChat] = useState<Partial<IChat>>({});\r\n  const [currentCall, setCurrentCall] = useState<Peer.MediaConnection | null>(\r\n    null\r\n  );\r\n  const [isCallActive, setIsCallActive] = useState<boolean>(false);\r\n\r\n  const peer = useMemo(() => {\r\n    const user = getUser();\r\n    const myPeer = new Peer(user._id, {\r\n      host: 'localhost',\r\n      port: 3030,\r\n      path: '/peerjs',\r\n    });\r\n\r\n    return myPeer;\r\n  }, []);\r\n\r\n  const chatClicked = (chat: IChat) => {\r\n    const newChats = chats.map((item) => {\r\n      if (item._id === chat._id) {\r\n        return {\r\n          ...chat,\r\n          [getUnreadMessagesKey()]: 0,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setChats(newChats);\r\n    setActiveChat(chat);\r\n  };\r\n\r\n  const callUser = async () => {\r\n    if (!activeChat?._id) return;\r\n\r\n    const user = getUser();\r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n    });\r\n\r\n    const otherId =\r\n      user.role === 'operator'\r\n        ? activeChat.client!._id\r\n        : activeChat.operator!._id;\r\n    const call = peer.call(otherId, stream);\r\n\r\n    call.on('stream', (userAudioStream) => {\r\n      const audioEl = audioRef.current;\r\n      addAudioStream(audioEl!, userAudioStream);\r\n      setCurrentCall(call);\r\n    });\r\n\r\n    call.on('close', () => {\r\n      console.log('caller onclose');\r\n      setCurrentCall(null);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    peer.on('call', async (call) => {\r\n      console.log('call', call);\r\n      const caller = await apiClient.service('users').get(call.peer);\r\n\r\n      Modal.confirm({\r\n        title: `${caller.firstName} ${caller.lastName} вам звонит, ответить?`,\r\n        centered: true,\r\n        okText: 'Да',\r\n        cancelText: 'Нет',\r\n        onOk: async () => {\r\n          const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n          });\r\n\r\n          call.answer(stream);\r\n          setIsCallActive(true);\r\n          setCurrentCall(call);\r\n\r\n          call.on('stream', (userAudioStream) => {\r\n            const audioEl = audioRef.current;\r\n            addAudioStream(audioEl!, userAudioStream);\r\n          });\r\n          call.on('close', () => {\r\n            console.log('callee onclose');\r\n            setCurrentCall(null);\r\n          });\r\n        },\r\n        onCancel: () => {\r\n          call.close();\r\n        },\r\n      });\r\n    });\r\n  }, [peer, activeChat, currentCall]);\r\n\r\n  useEffect(() => {\r\n    const parsedQuery = querystring.parse(search);\r\n    const user = getUser();\r\n    if (parsedQuery.from === 'client' && user.role === 'client') {\r\n      const connectToOperator = async () => {\r\n        const {\r\n          data: idleOperators,\r\n        }: Paginated<IUser> = await apiClient.service('users').find({\r\n          query: {\r\n            role: 'operator',\r\n            isOnline: true,\r\n            isBusy: false,\r\n          },\r\n        });\r\n        if (idleOperators.length === 0) return;\r\n\r\n        const randomInteger = getRandomInteger(0, idleOperators.length - 1);\r\n        const randomIdleOperator = idleOperators[randomInteger];\r\n        // debugger;\r\n        console.log('conect', idleOperators, randomIdleOperator, user);\r\n\r\n        try {\r\n          const newChat: IChat = await apiClient.service('chats').create({\r\n            clientId: getUser()._id,\r\n            operatorId: randomIdleOperator._id,\r\n          });\r\n          setActiveChat(newChat);\r\n        } catch (e) {\r\n          console.error('Error while creating chat', e);\r\n        }\r\n      };\r\n\r\n      connectToOperator();\r\n    }\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    apiClient.service('chats').on('created', (chat: IChat) => {\r\n      console.log('created chat', chat);\r\n      setChats((v) => [chat, ...v]);\r\n    });\r\n    apiClient.service('chats').on('patched', (chat: IChat) => {\r\n      console.log('patched chat', chat);\r\n      const newChats = chats.map((item) => {\r\n        if (item._id === chat._id) {\r\n          return {\r\n            ...chat,\r\n            [getUnreadMessagesKey()]:\r\n              activeChat._id === chat._id ? 0 : getUnreadMessages(chat),\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      setChats(newChats);\r\n    });\r\n\r\n    return () => {\r\n      apiClient.service('chats').removeListener('created');\r\n      apiClient.service('chats').removeListener('patched');\r\n    };\r\n  }, [chats]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <audio ref={audioRef} />\r\n\r\n      <Side\r\n        chats={chats}\r\n        activeChat={activeChat}\r\n        setChats={setChats}\r\n        onChatClick={chatClicked}\r\n      />\r\n      <Body\r\n        activeChat={activeChat}\r\n        onCallUser={callUser}\r\n        isCallActive={isCallActive}\r\n        currentCall={currentCall}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction addAudioStream(audio: HTMLAudioElement, stream: MediaStream) {\r\n  audio.srcObject = stream;\r\n  audio.addEventListener('loadedmetadata', () => {\r\n    audio.play();\r\n  });\r\n}\r\n\r\nfunction addVideoStream(video: HTMLVideoElement, stream: MediaStream) {\r\n  const vidos = document.getElementById('video-window') as HTMLVideoElement;\r\n\r\n  vidos.srcObject = stream;\r\n  vidos.addEventListener('loadedmetadata', () => {\r\n    vidos.play();\r\n  });\r\n  // const videoGrid = document.getElementById(\r\n  //   'video-container'\r\n  // ) as HTMLDivElement;\r\n\r\n  // video.srcObject = stream;\r\n  // video.addEventListener('loadedmetadata', () => {\r\n  //   console.log('video element', video, video.srcObject, stream);\r\n  //   video.play();\r\n  // });\r\n  // videoGrid.append(video);\r\n}\r\n\r\n// function connectToNewUser(userId: string, stream: MediaStream, peer: Peer) {\r\n//   const call = peer.call(userId, stream);\r\n//   const video = document.createElement('video');\r\n//   call.on('stream', (userVideoStream) => {\r\n//     addVideoStream(video, userVideoStream);\r\n//   });\r\n//   call.on('close', () => {\r\n//     video.remove();\r\n//   });\r\n// }\r\n\r\nexport default Chat;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\404.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Message.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\DataContext.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"120","replacedBy":"126"},{"ruleId":"122","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":39,"column":6,"nodeType":"130","endLine":39,"endColumn":8,"suggestions":"131"},{"ruleId":"120","replacedBy":"132"},{"ruleId":"122","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":31,"column":5,"nodeType":"136","messageId":"137","endLine":31,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":56,"column":9,"nodeType":"136","messageId":"137","endLine":56,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":71,"column":7,"nodeType":"136","messageId":"137","endLine":71,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":101,"column":28,"nodeType":"136","messageId":"137","endLine":101,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":21,"column":8,"nodeType":"140","messageId":"141","endLine":21,"endColumn":17},{"ruleId":"142","severity":1,"message":"139","line":21,"column":8,"nodeType":"140","messageId":"141","endLine":21,"endColumn":17},{"ruleId":"138","severity":1,"message":"143","line":34,"column":3,"nodeType":"140","messageId":"141","endLine":34,"endColumn":15},{"ruleId":"138","severity":1,"message":"144","line":41,"column":11,"nodeType":"140","messageId":"141","endLine":41,"endColumn":15},{"ruleId":"142","severity":1,"message":"144","line":41,"column":11,"nodeType":"140","messageId":"141","endLine":41,"endColumn":15},{"ruleId":"134","severity":1,"message":"135","line":166,"column":9,"nodeType":"136","messageId":"137","endLine":166,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":94,"column":7,"nodeType":"136","messageId":"137","endLine":94,"endColumn":18},{"ruleId":"120","replacedBy":"145"},{"ruleId":"122","replacedBy":"146"},{"ruleId":"134","severity":1,"message":"135","line":80,"column":7,"nodeType":"136","messageId":"137","endLine":80,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":87,"column":7,"nodeType":"136","messageId":"137","endLine":87,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":109,"column":13,"nodeType":"136","messageId":"137","endLine":109,"endColumn":24},{"ruleId":"134","severity":1,"message":"135","line":139,"column":9,"nodeType":"136","messageId":"137","endLine":139,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":158,"column":7,"nodeType":"136","messageId":"137","endLine":158,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":162,"column":7,"nodeType":"136","messageId":"137","endLine":162,"endColumn":18},{"ruleId":"128","severity":1,"message":"147","line":180,"column":6,"nodeType":"130","endLine":180,"endColumn":13,"suggestions":"148"},{"ruleId":"138","severity":1,"message":"149","line":209,"column":10,"nodeType":"140","messageId":"141","endLine":209,"endColumn":24},{"ruleId":"142","severity":1,"message":"149","line":209,"column":10,"nodeType":"140","messageId":"141","endLine":209,"endColumn":24},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],["150"],["151"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["152"],["150"],["151"],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-unused-vars","'userEvent' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'isCallActive' is defined but never used.","'user' is assigned a value but never used.",["150"],["151"],"React Hook useEffect has a missing dependency: 'activeChat._id'. Either include it or remove the dependency array.",["153"],"'addVideoStream' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [history]",{"range":"158","text":"159"},"Update the dependencies array to be: [activeChat._id, chats]",{"range":"160","text":"161"},[1117,1119],"[history]",[5054,5061],"[activeChat._id, chats]"]
[{"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx":"1","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts":"2","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx":"3","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx":"4","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts":"5","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx":"6","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx":"7","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx":"8","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx":"9","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts":"10","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx":"11","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx":"12","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx":"13","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx":"14","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx":"15","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx":"16","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx":"17","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\404.tsx":"18"},{"size":955,"mtime":1606752924263,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1606394056262,"results":"21","hashOfConfig":"20"},{"size":497,"mtime":1606753052834,"results":"22","hashOfConfig":"20"},{"size":5319,"mtime":1607175419075,"results":"23","hashOfConfig":"20"},{"size":1817,"mtime":1606981996950,"results":"24","hashOfConfig":"20"},{"size":1030,"mtime":1606989116982,"results":"25","hashOfConfig":"20"},{"size":814,"mtime":1606988690423,"results":"26","hashOfConfig":"20"},{"size":3362,"mtime":1607099127675,"results":"27","hashOfConfig":"20"},{"size":657,"mtime":1606739969629,"results":"28","hashOfConfig":"20"},{"size":598,"mtime":1606755555058,"results":"29","hashOfConfig":"20"},{"size":2198,"mtime":1606982541400,"results":"30","hashOfConfig":"20"},{"size":2941,"mtime":1606990132181,"results":"31","hashOfConfig":"20"},{"size":9034,"mtime":1607247060901,"results":"32","hashOfConfig":"20"},{"size":398,"mtime":1607099012551,"results":"33","hashOfConfig":"20"},{"size":5310,"mtime":1606989964327,"results":"34","hashOfConfig":"20"},{"size":236,"mtime":1606990551717,"results":"35","hashOfConfig":"20"},{"size":6724,"mtime":1607249325654,"results":"36","hashOfConfig":"20"},{"size":227,"mtime":1606988631945,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1josc0v",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\App.tsx",[],["82","83"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\reportWebVitals.ts",[],["84","85"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\index.tsx",[],["86","87"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\index.ts",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx",[],["88","89"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx",["90"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\utils\\apiClient.ts",[],["91","92"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx",["93","94"],"import React, { useMemo, useState } from 'react';\r\nimport { Modal, Upload } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nimport { getToken } from 'utils';\r\n\r\nimport { RcCustomRequestOptions } from 'antd/lib/upload/interface';\r\nimport { IUpload } from 'types';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onOk: (uploads: IUpload[]) => void;\r\n};\r\n\r\nconst UploadFile: React.FC<Props> = ({ isVisible, onClose, onOk }) => {\r\n  const [uploads, setUploads] = useState<IUpload[]>([]);\r\n\r\n  const photos = useMemo(() => {\r\n    return uploads.map((photo) => ({\r\n      uid: photo._id,\r\n      name: photo.filename,\r\n      size: 50,\r\n      type: photo.mimetype as string,\r\n      url: photo.path,\r\n    }));\r\n  }, [uploads]);\r\n\r\n  const uploadFile = async (fileInfo: RcCustomRequestOptions) => {\r\n    console.log('args', fileInfo);\r\n    const token = getToken();\r\n\r\n    const file = fileInfo.file;\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n\r\n    try {\r\n      const response = (\r\n        await axios({\r\n          method: 'post',\r\n          url: process.env.REACT_APP_FILE_URL,\r\n          data,\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n      ).data[0];\r\n\r\n      setUploads((v) => [...v, response]);\r\n      console.log('resp', response);\r\n    } catch (e) {\r\n      console.error('error in uploading', e);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setUploads([]);\r\n    onClose();\r\n  };\r\n\r\n  const onSendPhoto = () => {\r\n    setUploads([]);\r\n    onOk(uploads);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={isVisible}\r\n      onCancel={onCloseModal}\r\n      onOk={() => onSendPhoto()}\r\n      okText=\"Отправить\"\r\n      cancelText=\"Отменить\"\r\n      centered\r\n      destroyOnClose\r\n    >\r\n      <Upload\r\n        customRequest={uploadFile}\r\n        listType=\"picture-card\"\r\n        fileList={photos}\r\n      >\r\n        {uploads.length >= 4 ? null : (\r\n          <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Загрузить</div>\r\n          </div>\r\n        )}\r\n      </Upload>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Main.tsx",["95","96"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx",["97","98","99","100"],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx",["101"],"import { Paginated } from '@feathersjs/feathers';\r\nimport { Input } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport { IChat } from 'types';\r\nimport { getReceiver, getUser } from 'utils';\r\nimport apiClient from 'utils/apiClient';\r\n\r\ntype Props = {\r\n  chats: IChat[];\r\n  activeChat: Partial<IChat>;\r\n  setChats: React.Dispatch<React.SetStateAction<IChat[]>>;\r\n  onChatClick: (chat: IChat) => void;\r\n};\r\n\r\nconst Side: React.FC<Props> = ({\r\n  chats,\r\n  activeChat,\r\n  setChats,\r\n  onChatClick,\r\n}) => {\r\n  const [hasMore, setHasMore] = useState<boolean>(true);\r\n  const [search, setSearch] = useState<string>('');\r\n\r\n  const filteredChats = useMemo(() => {\r\n    if (!search) return chats;\r\n    return chats.filter(\r\n      (chat) =>\r\n        chat[getReceiver()]?.firstName\r\n          ?.toLowerCase()\r\n          .includes(search.toLowerCase()) ||\r\n        chat[getReceiver()]?.lastName\r\n          ?.toLowerCase()\r\n          .includes(search.toLowerCase())\r\n    );\r\n  }, [search, chats]);\r\n\r\n  const sortedChats = useMemo(() => {\r\n    return filteredChats.sort(\r\n      (a, b) =>\r\n        new Date(b.lastMessageDate).getTime() -\r\n        new Date(a.lastMessageDate).getTime()\r\n    );\r\n  }, [filteredChats]);\r\n\r\n  const getUnreadMessages = (chat: IChat) =>\r\n    chat[\r\n      (getUser().role + 'UnreadMessages') as\r\n        | 'clientUnreadMessages'\r\n        | 'operatorUnreadMessages'\r\n    ];\r\n\r\n  const fetchNewChats = async () => {\r\n    const user = getUser();\r\n    const field = user.role === 'client' ? 'clientId' : 'operatorId';\r\n\r\n    const response: Paginated<IChat> = await apiClient.service('chats').find({\r\n      query: {\r\n        [field]: user._id,\r\n        $limit: 15,\r\n        $skip: chats.length,\r\n        $search: search || undefined,\r\n      },\r\n    });\r\n\r\n    const newItems = chats.concat(response.data);\r\n    setChats(newItems);\r\n\r\n    if (newItems.length >= response.total) {\r\n      setHasMore(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchChats = async () => {\r\n      const user = getUser();\r\n      const field = user.role === 'client' ? 'clientId' : 'operatorId';\r\n\r\n      const response: Paginated<IChat> = await apiClient.service('chats').find({\r\n        query: {\r\n          [field]: user._id,\r\n          $limit: 15,\r\n          $skip: 0,\r\n        },\r\n      });\r\n\r\n      console.log('chats', response);\r\n      setChats(response.data);\r\n    };\r\n\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat__side\">\r\n      <div className=\"chat__side-search\">\r\n        <Avatar src={getUser().avatar?.path} />\r\n        <Input\r\n          placeholder=\"Поиск\"\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n        />\r\n      </div>\r\n      <h2 className=\"chat__title\">Чаты</h2>\r\n      <div className=\"chat__side-items\" id=\"scrollableContainer\">\r\n        <InfiniteScroll\r\n          dataLength={chats.length}\r\n          next={fetchNewChats}\r\n          hasMore={hasMore}\r\n          loader={\r\n            chats.length === 0 ? (\r\n              <span />\r\n            ) : (\r\n              <ReactLoading\r\n                type=\"bars\"\r\n                color=\"#69C262\"\r\n                width=\"40px\"\r\n                className=\"loading-center\"\r\n              />\r\n            )\r\n          }\r\n          scrollableTarget=\"scrollableContainer\"\r\n        >\r\n          {sortedChats.map((chat) => {\r\n            return (\r\n              <div\r\n                key={chat._id}\r\n                className={clsx('chat__box', {\r\n                  'chat__box--active': chat._id === activeChat._id,\r\n                })}\r\n                onClick={() => onChatClick(chat)}\r\n              >\r\n                <div className=\"chat__box__left\">\r\n                  <Avatar src={chat[getReceiver()]?.avatar?.path} />\r\n                </div>\r\n                <div className=\"chat__box__center\">\r\n                  <div className=\"chat__box__name\">\r\n                    {chat[getReceiver()]?.firstName}{' '}\r\n                    {chat[getReceiver()]?.lastName}\r\n                  </div>\r\n                  <div className=\"chat__box__last-message\">\r\n                    {chat.lastMessage?.userId === getUser()._id && (\r\n                      <span>Вы:</span>\r\n                    )}\r\n                    {chat.lastMessage?.type === 'text' &&\r\n                      chat.lastMessage?.text}\r\n                    {chat.lastMessage?.type === 'photo' && '📥 Photo'}\r\n                  </div>\r\n                </div>\r\n                <div className=\"chat__box__right\">\r\n                  <div className=\"chat__box__time\">\r\n                    {moment(chat.lastMessage?.createdAt).format('HH:mm')}\r\n                  </div>\r\n                  {!!getUnreadMessages(chat) && (\r\n                    <div className=\"chat__box__messages-count\">\r\n                      {getUnreadMessages(chat)}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </InfiniteScroll>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Side;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx",[],"M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx",["102","103","104","105","106","107","108","109","110","111"],"import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport querystring from 'query-string';\r\nimport Peer from 'peerjs';\r\nimport { Modal } from 'antd';\r\nimport { useLocation } from 'react-router';\r\n\r\nimport Side from './Side';\r\nimport Body from './Body';\r\n\r\nimport apiClient from 'utils/apiClient';\r\nimport {\r\n  getRandomInteger,\r\n  getUnreadMessages,\r\n  getUnreadMessagesKey,\r\n  getUser,\r\n} from 'utils';\r\n\r\nimport { Paginated } from '@feathersjs/feathers';\r\nimport { IChat, IUser } from 'types';\r\n\r\nconst Chat = () => {\r\n  const { search } = useLocation();\r\n\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [activeChat, setActiveChat] = useState<Partial<IChat>>({});\r\n  const [currentCall, setCurrentCall] = useState<Peer.MediaConnection | null>(\r\n    null\r\n  );\r\n  const [isCallActive, setIsCallActive] = useState<boolean>(false);\r\n\r\n  const peer = useMemo(() => {\r\n    const user = getUser();\r\n    const myPeer = new Peer(user._id, {\r\n      host: '/',\r\n      port: 4000,\r\n    });\r\n\r\n    return myPeer;\r\n  }, []);\r\n\r\n  const chatClicked = (chat: IChat) => {\r\n    const newChats = chats.map((item) => {\r\n      if (item._id === chat._id) {\r\n        return {\r\n          ...chat,\r\n          [getUnreadMessagesKey()]: 0,\r\n        };\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setChats(newChats);\r\n    setActiveChat(chat);\r\n  };\r\n\r\n  const callUser = async () => {\r\n    if (!activeChat?._id) return;\r\n\r\n    const user = getUser();\r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n    });\r\n\r\n    const otherId =\r\n      user.role === 'operator'\r\n        ? activeChat.client!._id\r\n        : activeChat.operator!._id;\r\n    const call = peer.call(otherId, stream);\r\n\r\n    call.on('stream', (userAudioStream) => {\r\n      const audioEl = audioRef.current;\r\n      addAudioStream(audioEl!, userAudioStream);\r\n      setCurrentCall(call);\r\n    });\r\n\r\n    call.on('close', () => {\r\n      console.log('caller onclose');\r\n\r\n      // call.close();\r\n      setCurrentCall(null);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    peer.on('call', async (call) => {\r\n      console.log('call', call);\r\n      const caller = await apiClient.service('users').get(call.peer);\r\n\r\n      Modal.confirm({\r\n        title: `${caller.firstName} ${caller.lastName} вам звонит, ответить?`,\r\n        centered: true,\r\n        okText: 'Да',\r\n        cancelText: 'Нет',\r\n        onOk: async () => {\r\n          const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n          });\r\n\r\n          call.answer(stream);\r\n          setIsCallActive(true);\r\n          setCurrentCall(call);\r\n\r\n          call.on('stream', (userAudioStream) => {\r\n            const audioEl = audioRef.current;\r\n            addAudioStream(audioEl!, userAudioStream);\r\n          });\r\n          call.on('close', () => {\r\n            console.log('callee onclose');\r\n            // call.close();\r\n            setCurrentCall(null);\r\n          });\r\n        },\r\n        onCancel: () => {\r\n          call.close();\r\n        },\r\n      });\r\n    });\r\n  }, [peer, activeChat, currentCall]);\r\n\r\n  useEffect(() => {\r\n    const parsedQuery = querystring.parse(search);\r\n    const user = getUser();\r\n    if (parsedQuery.from === 'client' && user.role === 'client') {\r\n      const connectToOperator = async () => {\r\n        const {\r\n          data: idleOperators,\r\n        }: Paginated<IUser> = await apiClient.service('users').find({\r\n          query: {\r\n            role: 'operator',\r\n            isOnline: true,\r\n            isBusy: false,\r\n          },\r\n        });\r\n        if (idleOperators.length === 0) return;\r\n\r\n        const randomInteger = getRandomInteger(0, idleOperators.length - 1);\r\n        const randomIdleOperator = idleOperators[randomInteger];\r\n        // debugger;\r\n        console.log('conect', idleOperators, randomIdleOperator, user);\r\n\r\n        try {\r\n          const newChat: IChat = await apiClient.service('chats').create({\r\n            clientId: getUser()._id,\r\n            operatorId: randomIdleOperator._id,\r\n          });\r\n          setActiveChat(newChat);\r\n        } catch (e) {\r\n          console.error('Error while creating chat', e);\r\n        }\r\n      };\r\n\r\n      connectToOperator();\r\n    }\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    apiClient.service('chats').on('created', (chat: IChat) => {\r\n      console.log('created chat', chat);\r\n      setChats((v) => [chat, ...v]);\r\n    });\r\n    apiClient.service('chats').on('patched', (chat: IChat) => {\r\n      console.log('patched chat', chat);\r\n      const newChats = chats.map((item) => {\r\n        if (item._id === chat._id) {\r\n          return {\r\n            ...chat,\r\n            [getUnreadMessagesKey()]:\r\n              activeChat._id === chat._id ? 0 : getUnreadMessages(chat),\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      setChats(newChats);\r\n    });\r\n\r\n    return () => {\r\n      apiClient.service('chats').removeListener('created');\r\n      apiClient.service('chats').removeListener('patched');\r\n    };\r\n  }, [chats]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <audio ref={audioRef} />\r\n\r\n      <Side\r\n        chats={chats}\r\n        activeChat={activeChat}\r\n        setChats={setChats}\r\n        onChatClick={chatClicked}\r\n      />\r\n      <Body\r\n        activeChat={activeChat}\r\n        onNewMessageAdded={() => console.log('jdjdjj')}\r\n        onCallUser={callUser}\r\n        isCallActive={isCallActive}\r\n        currentCall={currentCall}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction addAudioStream(audio: HTMLAudioElement, stream: MediaStream) {\r\n  audio.srcObject = stream;\r\n  audio.addEventListener('loadedmetadata', () => {\r\n    audio.play();\r\n  });\r\n}\r\n\r\nfunction addVideoStream(video: HTMLVideoElement, stream: MediaStream) {\r\n  const vidos = document.getElementById('video-window') as HTMLVideoElement;\r\n\r\n  vidos.srcObject = stream;\r\n  vidos.addEventListener('loadedmetadata', () => {\r\n    vidos.play();\r\n  });\r\n  // const videoGrid = document.getElementById(\r\n  //   'video-container'\r\n  // ) as HTMLDivElement;\r\n\r\n  // video.srcObject = stream;\r\n  // video.addEventListener('loadedmetadata', () => {\r\n  //   console.log('video element', video, video.srcObject, stream);\r\n  //   video.play();\r\n  // });\r\n  // videoGrid.append(video);\r\n}\r\n\r\n// function connectToNewUser(userId: string, stream: MediaStream, peer: Peer) {\r\n//   const call = peer.call(userId, stream);\r\n//   const video = document.createElement('video');\r\n//   call.on('stream', (userVideoStream) => {\r\n//     addVideoStream(video, userVideoStream);\r\n//   });\r\n//   call.on('close', () => {\r\n//     video.remove();\r\n//   });\r\n// }\r\n\r\nexport default Chat;\r\n","M:\\Media Files\\Other\\course-project\\code\\callmaster-frontend\\src\\pages\\404.tsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"112","replacedBy":"118"},{"ruleId":"114","replacedBy":"119"},{"ruleId":"112","replacedBy":"120"},{"ruleId":"114","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":36,"column":6,"nodeType":"124","endLine":36,"endColumn":8,"suggestions":"125"},{"ruleId":"112","replacedBy":"126"},{"ruleId":"114","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":31,"column":5,"nodeType":"130","messageId":"131","endLine":31,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":49,"column":7,"nodeType":"130","messageId":"131","endLine":49,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":13,"column":10,"nodeType":"134","messageId":"135","endLine":13,"endColumn":14},{"ruleId":"136","severity":1,"message":"133","line":13,"column":10,"nodeType":"134","messageId":"135","endLine":13,"endColumn":14},{"ruleId":"132","severity":1,"message":"137","line":2,"column":34,"nodeType":"134","messageId":"135","endLine":2,"endColumn":39},{"ruleId":"136","severity":1,"message":"137","line":2,"column":34,"nodeType":"134","messageId":"135","endLine":2,"endColumn":39},{"ruleId":"132","severity":1,"message":"138","line":32,"column":3,"nodeType":"134","messageId":"135","endLine":32,"endColumn":15},{"ruleId":"128","severity":1,"message":"129","line":163,"column":9,"nodeType":"130","messageId":"131","endLine":163,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":92,"column":7,"nodeType":"130","messageId":"131","endLine":92,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":79,"column":7,"nodeType":"130","messageId":"131","endLine":79,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":88,"column":7,"nodeType":"130","messageId":"131","endLine":88,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":110,"column":13,"nodeType":"130","messageId":"131","endLine":110,"endColumn":24},{"ruleId":"128","severity":1,"message":"129","line":141,"column":9,"nodeType":"130","messageId":"131","endLine":141,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":160,"column":7,"nodeType":"130","messageId":"131","endLine":160,"endColumn":18},{"ruleId":"128","severity":1,"message":"129","line":164,"column":7,"nodeType":"130","messageId":"131","endLine":164,"endColumn":18},{"ruleId":"122","severity":1,"message":"139","line":182,"column":6,"nodeType":"124","endLine":182,"endColumn":13,"suggestions":"140"},{"ruleId":"128","severity":1,"message":"129","line":196,"column":34,"nodeType":"130","messageId":"131","endLine":196,"endColumn":45},{"ruleId":"132","severity":1,"message":"141","line":212,"column":10,"nodeType":"134","messageId":"135","endLine":212,"endColumn":24},{"ruleId":"136","severity":1,"message":"141","line":212,"column":10,"nodeType":"134","messageId":"135","endLine":212,"endColumn":24},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],["142"],["143"],["142"],["143"],["142"],["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["144"],["142"],["143"],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'Modal' is defined but never used.","'isCallActive' is defined but never used.","React Hook useEffect has a missing dependency: 'activeChat._id'. Either include it or remove the dependency array.",["145"],"'addVideoStream' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [history]",{"range":"150","text":"151"},"Update the dependencies array to be: [activeChat._id, chats]",{"range":"152","text":"153"},[1007,1009],"[history]",[5078,5085],"[activeChat._id, chats]"]
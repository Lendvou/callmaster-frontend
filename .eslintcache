[{"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\App.tsx":"1","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx":"2","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\layouts\\Main.tsx":"3","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx":"4","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\user\\index.ts":"5","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\user\\thunkActions.ts":"6","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx":"7","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx":"8","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx":"9","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx":"10","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Message.tsx":"11","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx":"12","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\utils\\index.ts":"13","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\core\\index.ts":"14","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\core\\thunkActions.ts":"15","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\index.ts":"16","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\404.tsx":"17","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx":"18","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx":"19","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx":"20","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\reportWebVitals.ts":"21","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\utils\\apiClient.ts":"22","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\index.tsx":"23"},{"size":1046,"mtime":1622037401832,"results":"24","hashOfConfig":"25"},{"size":398,"mtime":1607874808378,"results":"26","hashOfConfig":"25"},{"size":4203,"mtime":1622014719154,"results":"27","hashOfConfig":"25"},{"size":2905,"mtime":1622015445649,"results":"28","hashOfConfig":"25"},{"size":769,"mtime":1622037247962,"results":"29","hashOfConfig":"25"},{"size":1435,"mtime":1622037056329,"results":"30","hashOfConfig":"25"},{"size":3410,"mtime":1622038399516,"results":"31","hashOfConfig":"25"},{"size":7296,"mtime":1623591444596,"results":"32","hashOfConfig":"25"},{"size":5479,"mtime":1623592443343,"results":"33","hashOfConfig":"25"},{"size":6065,"mtime":1624798433238,"results":"34","hashOfConfig":"25"},{"size":1536,"mtime":1622015044761,"results":"35","hashOfConfig":"25"},{"size":846,"mtime":1622015174307,"results":"36","hashOfConfig":"25"},{"size":902,"mtime":1622015474167,"results":"37","hashOfConfig":"25"},{"size":499,"mtime":1622037255022,"results":"38","hashOfConfig":"25"},{"size":575,"mtime":1624797886589,"results":"39","hashOfConfig":"25"},{"size":1092,"mtime":1622038104319,"results":"40","hashOfConfig":"25"},{"size":227,"mtime":1606988631945,"results":"41","hashOfConfig":"25"},{"size":5319,"mtime":1607175419075,"results":"42","hashOfConfig":"25"},{"size":657,"mtime":1607356997418,"results":"43","hashOfConfig":"25"},{"size":236,"mtime":1606990551717,"results":"44","hashOfConfig":"25"},{"size":425,"mtime":1606394056262,"results":"45","hashOfConfig":"25"},{"size":598,"mtime":1606755555058,"results":"46","hashOfConfig":"25"},{"size":497,"mtime":1606753052834,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"np60tu",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"53"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\App.tsx",[],["102","103"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Admin\\index.tsx",[],["104","105"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\layouts\\Main.tsx",[],["106","107"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\components\\UploadFile.tsx",["108","109","110","111"],"import React, { useMemo, useState } from 'react';\r\nimport { Modal, Upload } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nimport { RcCustomRequestOptions } from 'antd/lib/upload/interface';\r\nimport { IUpload } from 'types';\r\nimport { useTypedSelector } from 'store';\r\n\r\ntype Props = {\r\n  isVisible: boolean;\r\n  onClose: () => void;\r\n  onOk: (uploads: IUpload[]) => void;\r\n};\r\n\r\nconst UploadFile: React.FC<Props> = ({ isVisible, onClose, onOk }) => {\r\n  const token = useTypedSelector((state) => state.user.token);\r\n\r\n  const [uploads, setUploads] = useState<IUpload[]>([]);\r\n\r\n  const photos = useMemo(() => {\r\n    return uploads.map((photo) => ({\r\n      uid: photo._id,\r\n      name: photo.filename,\r\n      size: 50,\r\n      type: photo.mimetype as string,\r\n      url: photo.path,\r\n    }));\r\n  }, [uploads]);\r\n\r\n  const uploadFile = async (fileInfo: RcCustomRequestOptions) => {\r\n    console.log('args', fileInfo);\r\n\r\n    const file = fileInfo.file;\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n\r\n    var reader = new FileReader();\r\n\r\n    //Read the contents of Image File.\r\n    reader.readAsDataURL(file);\r\n\r\n    reader.onload = function (e) {\r\n      //Initiate the JavaScript Image object.\r\n      var image = new Image();\r\n\r\n      //Set the Base64 string return from FileReader as source.\r\n      image.src = e.target!.result as string;\r\n\r\n      //Validate the File Height and Width.\r\n      image.onload = function () {\r\n        // @ts-ignore\r\n        var height = this.height;\r\n        // @ts-ignore\r\n        var width = this.width;\r\n        console.log('height withd', width, height);\r\n      };\r\n    };\r\n\r\n    try {\r\n      const response = (\r\n        await axios({\r\n          method: 'post',\r\n          url: process.env.REACT_APP_FILE_URL,\r\n          data,\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n      ).data[0];\r\n\r\n      setUploads((v) => [...v, response]);\r\n      console.log('resp', response);\r\n    } catch (e) {\r\n      console.error('error in uploading', e);\r\n    }\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setUploads([]);\r\n    onClose();\r\n  };\r\n\r\n  const onSendPhoto = () => {\r\n    setUploads([]);\r\n    onOk(uploads);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      visible={isVisible}\r\n      onCancel={onCloseModal}\r\n      onOk={() => onSendPhoto()}\r\n      okText=\"Отправить\"\r\n      cancelText=\"Отменить\"\r\n      centered\r\n      destroyOnClose\r\n    >\r\n      <Upload\r\n        customRequest={uploadFile}\r\n        listType=\"picture-card\"\r\n        fileList={photos}\r\n        onChange={(arg) => console.log('file', arg)}\r\n      >\r\n        {uploads.length >= 4 ? null : (\r\n          <div>\r\n            <PlusOutlined />\r\n            <div style={{ marginTop: 8 }}>Загрузить</div>\r\n          </div>\r\n        )}\r\n      </Upload>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UploadFile;\r\n","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\user\\index.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\user\\thunkActions.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\auth\\Login.tsx",["112"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Body.tsx",["113","114","115"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Avatar, Divider, Input } from 'antd';\r\nimport moment from 'moment';\r\nimport clsx from 'clsx';\r\nimport { PhoneOutlined, SendOutlined, UploadOutlined, UserOutlined } from '@ant-design/icons';\r\nimport Peer from 'peerjs';\r\n\r\nimport UploadFile from 'components/UploadFile';\r\nimport Message from './Message';\r\n\r\nimport apiClient from 'utils/apiClient';\r\nimport { getReceiver } from 'utils';\r\n\r\nimport { Paginated } from '@feathersjs/feathers';\r\nimport { IChat, IMessage, IUpload } from 'types';\r\nimport { useTypedSelector } from 'store';\r\n\r\ntype Props = {\r\n  activeChat: Partial<IChat>;\r\n  onCallUser: () => void;\r\n  isCallActive: boolean;\r\n  currentCall: Peer.MediaConnection | null;\r\n};\r\n\r\nconst Body: React.FC<Props> = ({ activeChat, onCallUser, isCallActive, currentCall }) => {\r\n  const inputRef = useRef<Input>(null);\r\n  const listRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const user = useTypedSelector((state) => state.user.user);\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n  const [inputVal, setInputVal] = useState<string>('');\r\n  const [hasMore, setHasMore] = useState<boolean>(false);\r\n\r\n  const fetchNewMessages = async () => {\r\n    const query = {\r\n      chatId: activeChat._id,\r\n      $limit: 20,\r\n      $skip: messages.length,\r\n      $sort: { createdAt: -1 },\r\n      $read: true,\r\n    };\r\n\r\n    const result: Paginated<IMessage> = await apiClient.service('messages').find({ query });\r\n\r\n    const newMessages = result.data.reverse().concat(messages);\r\n    setMessages(newMessages);\r\n\r\n    if (newMessages.length >= result.total) {\r\n      setHasMore(false);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!inputVal) return;\r\n\r\n    const data = {\r\n      text: inputVal,\r\n      authorRole: user.role,\r\n      chatId: activeChat._id,\r\n      userId: user._id,\r\n      type: 'text',\r\n    };\r\n\r\n    await apiClient.service('messages').create(data);\r\n    setInputVal('');\r\n  };\r\n\r\n  const onListScroll = async (e: React.UIEvent<HTMLDivElement>) => {\r\n    const element = e.target as HTMLDivElement;\r\n\r\n    if (hasMore && element.scrollTop === 0) {\r\n      const oldScrollHeight = element.scrollHeight;\r\n\r\n      await fetchNewMessages();\r\n      element.scrollTop = element.scrollHeight - oldScrollHeight;\r\n    }\r\n  };\r\n\r\n  const checkIfDividerIsNeeded = (message: IMessage, index: number): boolean => {\r\n    return (\r\n      !!messages[index + 1] &&\r\n      !moment(messages[index + 1].createdAt).isSame(moment(message.createdAt), 'day')\r\n    );\r\n  };\r\n\r\n  const createPhotoMessage = async (uploads: IUpload[]) => {\r\n    try {\r\n      await apiClient.service('messages').create({\r\n        type: 'photo',\r\n        photosIds: uploads.map((el) => el._id),\r\n        authorRole: user.role,\r\n        chatId: activeChat._id,\r\n        userId: user._id,\r\n      });\r\n      setIsModalVisible(false);\r\n    } catch (e) {\r\n      console.error('photo error', e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const receiveMessage = (message: IMessage) => {\r\n      const container = listRef.current;\r\n      const shouldScroll: boolean =\r\n        container!.scrollTop + container!.clientHeight === container!.scrollHeight;\r\n\r\n      const newMessages = messages.concat(message);\r\n      setMessages(newMessages);\r\n\r\n      if (user._id === message.userId || shouldScroll) {\r\n        container!.scrollTop = container!.scrollHeight;\r\n      }\r\n    };\r\n\r\n    apiClient.service('messages').on('created', (message: IMessage) => {\r\n      console.log('receive messsssssss', message);\r\n\r\n      if (activeChat._id) {\r\n        receiveMessage(message);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      apiClient.service('messages').removeListener('created');\r\n    };\r\n  }, [messages, activeChat]);\r\n\r\n  useEffect(() => {\r\n    if (activeChat?._id) {\r\n      const fetchChatMessages = async () => {\r\n        const query = {\r\n          chatId: activeChat._id,\r\n          $limit: 20,\r\n          $skip: 0,\r\n          $sort: { createdAt: -1 },\r\n          $read: true,\r\n        };\r\n        const result: Paginated<IMessage> = await apiClient.service('messages').find({ query });\r\n\r\n        console.info('messages', result);\r\n        const newMessages = result.data.reverse();\r\n        setMessages(newMessages);\r\n        setHasMore(true);\r\n\r\n        inputRef.current?.focus();\r\n        listRef.current!.scrollTop = listRef.current!.scrollHeight;\r\n\r\n        setTimeout(() => {\r\n          if (\r\n            listRef.current!.scrollTop + listRef.current!.clientHeight !==\r\n            listRef.current!.scrollHeight\r\n          ) {\r\n            listRef.current!.scrollTop = listRef.current!.scrollHeight;\r\n          }\r\n        }, 100);\r\n      };\r\n\r\n      fetchChatMessages();\r\n    }\r\n  }, [activeChat]);\r\n\r\n  return (\r\n    <div className=\"chat__body\" ref={containerRef} id=\"chatick\">\r\n      {activeChat?._id ? (\r\n        <div className=\"chat__main\">\r\n          <div className=\"chat__navbar\">\r\n            <div className=\"chat__navbar__left\">\r\n              <Avatar\r\n                src={activeChat[getReceiver(user)]?.avatar?.path}\r\n                className=\"chat__navbar__avatar\"\r\n                icon={<UserOutlined />}\r\n              />\r\n              <div className=\"chat__navbar__name\">\r\n                {/* {activeChat[getReceiver(user)]?.firstName} {activeChat[getReceiver(user)]?.lastName} */}\r\n                Клиент {activeChat.client?.num || '-'}\r\n              </div>\r\n            </div>\r\n\r\n            <PhoneOutlined\r\n              className={clsx('chat__navbar__phone', {\r\n                'chat__navbar__phone--close': !!currentCall,\r\n              })}\r\n              id=\"phone-button\"\r\n              onClick={currentCall ? () => currentCall.close() : onCallUser}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"chat__list\" ref={listRef} id=\"scrollableList\" onScroll={onListScroll}>\r\n            {messages.map((message, index) => (\r\n              <div key={message._id}>\r\n                <Message message={message} />\r\n\r\n                {checkIfDividerIsNeeded(message, index) && (\r\n                  <Divider>{moment(messages[index + 1].createdAt).format('DD.MM.YYYY')}</Divider>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"chat__inputs\">\r\n            <UploadOutlined\r\n              className=\"chat__input-upload\"\r\n              onClick={() => setIsModalVisible(true)}\r\n            />\r\n            <Input\r\n              ref={inputRef}\r\n              className=\"chat__input-field\"\r\n              value={inputVal}\r\n              onChange={(e) => setInputVal(e.target.value)}\r\n              onPressEnter={() => sendMessage()}\r\n            />\r\n            <SendOutlined className=\"chat__input-send\" onClick={() => sendMessage()} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"chat__select-chat\">\r\n          <div className=\"chat__select-chat-text\">Выберите чат</div>\r\n        </div>\r\n      )}\r\n\r\n      <UploadFile\r\n        isVisible={isModalVisible}\r\n        onClose={() => setIsModalVisible(false)}\r\n        onOk={createPhotoMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Side.tsx",["116"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\index.tsx",["117","118","119","120","121","122","123"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\Chat\\Message.tsx",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\routes\\Hoc.tsx",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\utils\\index.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\core\\index.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\core\\thunkActions.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\store\\index.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\404.tsx",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\pages\\auth\\Signup.tsx",[],["124","125"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\components\\FieldWithValidation.tsx",[],["126","127"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\layouts\\Auth.tsx",[],["128","129"],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\reportWebVitals.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\utils\\apiClient.ts",[],"M:\\Media Files\\Other\\course-project-4\\code\\callmaster-frontend\\src\\index.tsx",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"130","replacedBy":"134"},{"ruleId":"132","replacedBy":"135"},{"ruleId":"130","replacedBy":"136"},{"ruleId":"132","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":32,"column":5,"nodeType":"140","messageId":"141","endLine":32,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":56,"column":9,"nodeType":"140","messageId":"141","endLine":56,"endColumn":20},{"ruleId":"138","severity":1,"message":"139","line":71,"column":7,"nodeType":"140","messageId":"141","endLine":71,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":101,"column":28,"nodeType":"140","messageId":"141","endLine":101,"endColumn":39},{"ruleId":"142","severity":1,"message":"143","line":37,"column":6,"nodeType":"144","endLine":37,"endColumn":8,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":25,"column":58,"nodeType":"148","messageId":"149","endLine":25,"endColumn":70},{"ruleId":"138","severity":1,"message":"139","line":119,"column":7,"nodeType":"140","messageId":"141","endLine":119,"endColumn":18},{"ruleId":"142","severity":1,"message":"150","line":129,"column":6,"nodeType":"144","endLine":129,"endColumn":28,"suggestions":"151"},{"ruleId":"138","severity":1,"message":"139","line":91,"column":7,"nodeType":"140","messageId":"141","endLine":91,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":64,"column":7,"nodeType":"140","messageId":"141","endLine":64,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":73,"column":7,"nodeType":"140","messageId":"141","endLine":73,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":109,"column":7,"nodeType":"140","messageId":"141","endLine":109,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":136,"column":9,"nodeType":"140","messageId":"141","endLine":136,"endColumn":20},{"ruleId":"142","severity":1,"message":"152","line":151,"column":6,"nodeType":"144","endLine":151,"endColumn":14,"suggestions":"153"},{"ruleId":"138","severity":1,"message":"139","line":155,"column":7,"nodeType":"140","messageId":"141","endLine":155,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":159,"column":7,"nodeType":"140","messageId":"141","endLine":159,"endColumn":18},{"ruleId":"130","replacedBy":"154"},{"ruleId":"132","replacedBy":"155"},{"ruleId":"130","replacedBy":"156"},{"ruleId":"132","replacedBy":"157"},{"ruleId":"130","replacedBy":"158"},{"ruleId":"132","replacedBy":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],["160"],["161"],"no-console","Unexpected console statement.","MemberExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'isAuth'. Either include them or remove the dependency array.","ArrayExpression",["162"],"no-unused-vars","'isCallActive' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["164"],["160"],["161"],["160"],["161"],["160"],["161"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [history, isAuth]",{"range":"171","text":"172"},"Update the dependencies array to be: [messages, activeChat, user._id]",{"range":"173","text":"174"},"Update the dependencies array to be: [search, user]",{"range":"175","text":"176"},[1087,1089],"[history, isAuth]",[3859,3881],"[messages, activeChat, user._id]",[4509,4517],"[search, user]"]